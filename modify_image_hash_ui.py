# -*- coding: utf-8 -*-
"""modify_image_hash_ui

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-MOr-fVti00OfYH2PINWIxmN_sYOCaZ
"""

import hashlib
from PIL import Image
import numpy as np
import tkinter as tk
from tkinter import filedialog, messagebox

def calculate_hash(file_path):
    """Calculate the SHA-512 hash of a file."""
    with open(file_path, 'rb') as f:
        return hashlib.sha512(f.read()).hexdigest()

def modify_image_and_match_hash(image_path, target_prefix, output_path):
    """
    Modify an image's pixel data to achieve a hash starting with a specific prefix.
    """
    try:
        img = Image.open(image_path)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to open image: {e}")
        return

    pixels = np.array(img)

    original_hash = calculate_hash(image_path)
    print(f"Original hash: {original_hash}")

    for x in range(pixels.shape[0]):
        for y in range(pixels.shape[1]):
            # Modify the least significant bit (LSB) of each pixel
            pixels[x, y] ^= 1  # Flip LSB

            # Save the modified image
            modified_img = Image.fromarray(pixels)
            modified_img.save(output_path)

            # Calculate the new hash
            new_hash = calculate_hash(output_path)
            print(f"Current hash: {new_hash}")

            # Check if the new hash matches the target prefix
            if new_hash.startswith(target_prefix):
                messagebox.showinfo("Success", f"Success! Hash: {new_hash}")
                return

    messagebox.showwarning("Failure", "Unable to achieve the desired hash prefix.")

def browse_file(entry_widget):
    """Open a file dialog and set the selected file path to the entry widget."""
    file_path = filedialog.askopenfilename(filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg;*.jpeg")])
    if file_path:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, file_path)

def browse_save_file(entry_widget):
    """Open a save file dialog and set the selected file path to the entry widget."""
    file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
    if file_path:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, file_path)

def on_submit():
    """Handle the form submission and call the modify_image_and_match_hash function."""
    image_path = image_path_entry.get()
    target_prefix = prefix_entry.get()
    output_path = output_path_entry.get()

    if not image_path or not target_prefix or not output_path:
        messagebox.showerror("Error", "All fields are required.")
        return

    modify_image_and_match_hash(image_path, target_prefix, output_path)

# Create the main window
root = tk.Tk()
root.title("Image Hash Modifier")

# Create and place the UI elements
tk.Label(root, text="Image Path:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
image_path_entry = tk.Entry(root, width=40)
image_path_entry.grid(row=0, column=1, padx=5, pady=5)
tk.Button(root, text="Browse", command=lambda: browse_file(image_path_entry)).grid(row=0, column=2, padx=5, pady=5)

tk.Label(root, text="Target Hash Prefix:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
prefix_entry = tk.Entry(root, width=40)
prefix_entry.grid(row=1, column=1, padx=5, pady=5)

tk.Label(root, text="Output Path:").grid(row=2, column=0, padx=5, pady=5, sticky="e")
output_path_entry = tk.Entry(root, width=40)
output_path_entry.grid(row=2, column=1, padx=5, pady=5)
tk.Button(root, text="Save As", command=lambda: browse_save_file(output_path_entry)).grid(row=2, column=2, padx=5, pady=5)

tk.Button(root, text="Modify Image", command=on_submit).grid(row=3, column=1, padx=5, pady=10)

# Run the Tkinter event loop
root.mainloop()